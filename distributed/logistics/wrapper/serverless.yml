service: dst-wrapper

provider:
  name: aws
  runtime: python3.8
  stage: ${opt:stage,'dev'}
  environment:
    IS_OFFLINE: ${self:custom.isOffline.${self:provider.stage}}
    CONFIG: ${self:custom.config.${self:provider.stage}}
    ROLE: Wrapper
  versionFunctions: false
  iamRoleStatements:
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
      Resource: "*"
    - Effect: "Allow"
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:ListStreams
      Resource:
        - Fn::GetAtt:
          - wrapperHistory
          - Arn

package:
  individually: true
  include:
    - '!**'
    - reactors.json

#plugins:
#  - serverless-dynamodb-local
#  - serverless-offline # serverless-offline needs to be last in the list

custom:
  stages:
    - dev
    - local
  isOffline:
    dev: False
    local: True
  config:
    dev: /opt/configuration-dev.json
    local: /opt/configuration-local.json
  dynamodb:
  # If you only want to use DynamoDB Local in some stages, declare them here
    stages:
      - local
    start:
      port: 8000
      inMemory: true
      heapInitial: 200m
      heapMax: 1g
      migrate: true
      seed: true
      convertEmptyValues: true

functions:
  WrapperAdapter:
    name: WrapperAdapter
    handler: /opt/adapter.lambda_handler
    layers:
      - ${cf:pos-components-dev.AdapterLayerExport}
      - ${cf:pos-components-dev.DepsLayerExport}
      - ${cf:logistics-dev.ConfigurationLayerExport}
    reservedConcurrency: 1
  WrapperEmitter:
    name: WrapperEmitter
    handler: /opt/emitter.lambda_handler
    layers:
      - ${cf:pos-components-dev.EmitterLayerExport}
      - ${cf:pos-components-dev.DepsLayerExport}
  WrapperReceiver:
    name: WrapperReceiver
    handler: /opt/receiver.lambda_handler
    layers:
      - ${cf:pos-components-dev.ReceiverLayerExport}
      - ${cf:pos-components-dev.DepsLayerExport}
    events:
      - httpApi: POST /wrapper/messages
  RequestWrappingReactor:
    name: Wrapper_RequestWrapping_Reactor
    handler: request_wrapping_reactor.lambda_handler
    package:
      include:
        - request_wrapping_reactor.py

resources: # CloudFormation template syntax from here on.
  Resources:
    wrapperHistory:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: WrapperHistory
        AttributeDefinitions:
          - AttributeName: orderID
            AttributeType: S
          - AttributeName: _time
            AttributeType: S
        KeySchema:
          - AttributeName: orderID
            KeyType: HASH
          - AttributeName: _time
            KeyType: RANGE
        TimeToLiveSpecification:
          AttributeName: _exp
          Enabled: true
        BillingMode: PAY_PER_REQUEST
